
1.floating point addation takes more than one cycles.
2.a=b+c+d+f; floating and double can't use EXPRESSION_BALANCE; integer can.
  -XAPP599 & ug902
3. ALways use pointer to pass the structure.
    
    D_point_or query_or_temp;
    #pragma HLS ARRAY_PARTITION variable=query_or_temp.x cyclic factor=480 dim=1 
    D_point_or feature_or_temp;
    #pragma HLS ARRAY_PARTITION variable=feature_or_temp.x cyclic factor=480 dim=1
    void dist_calc_or1(D_point_or feature_or, D_point_or query_or){}
    
    void dist_calc_or1(feature_or_temp, query_or_temp){}
    Will read data one byone fist and the partition cannot work in the function "dist_calc_or1".
    
4. "WARNING: [XFORM 203-713] Argument 'index_or_heap0_temp' has read and write operations in process function 'k_max'.
    WARNING: [XFORM 203-713] All the elements of global array 'index_or_heap0_temp'  should be updated in process function 'k_max', otherwise it may not be synthesized correctly.
    WARNING: [XFORM 203-713] Reading dataflow channel 'dists_or_heap0_temp.V'  in the middle of dataflow may stall the dataflow pipeline:
    WARNING: [XFORM 203-713] Argument 'dists_or_heap0_temp.V' has read and write operations in process function 'k_max'.
    WARNING: [XFORM 203-713] All the elements of global array 'dists_or_heap0_temp.V'  should be updated in process function 'k_max', otherwise it may not be synthesized correctly."
    
    It's not wise to update the same variable in different function.
    The updata operation should be done in the same function.
5. Partially uroll the for loop.
   a. using #pragma HLS unroll factor = n
   b. For nested loop for function, we can use:
       #pragma HLS ALLOCATION instances=fmul limit=32 operation
   
6. A case that cause the burst read doesn't work.
   a. don't uroll the for loop, which is used for the reading from DDR.
   func_top(){
      for(){
          #pragma HLS pipline
          func_0();
          func_1();
      }
   }
   
   func_0(){
      for(i:n){
          temp = port[i]
      }
   }
   In this case the pipeline directive will unroll all the for loops in the func_0 and func_1.
   so for the func_0() case the "temp = port[i]" line is also unrolled.
   But there is only one physical port from the DDR bank to the "port*".
   This unroll cause the burst read of "port" cannot work.
   
